# Workaround for foreach + deny syntax bug - use anyPattern instead
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-privileged-root-containers
spec:
  validationFailureAction: enforce
  background: true
  rules:
    - name: deny-privileged-or-root-any-container
      match:
        resources:
          kinds:
            - Deployment
      validate:
        message: >-
          All containers must have proper security context: runAsNonRoot=true,
          allowPrivilegeEscalation=false, and must NOT have privileged=true, runAsUser=0
        anyPattern:
          - spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
          - spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
          - spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
          - spec:
              template:
                spec:
                  containers:
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                  - securityContext:
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
    - name: deny-explicitly-bad-security-context
      match:
        resources:
          kinds:
            - Deployment
      validate:
        message: >-
          Containers must NOT have privileged=true, runAsUser=0, or allowPrivilegeEscalation=true
        deny:
          any:
            - field: "spec.template.spec.containers[0].securityContext.privileged"
              equals: true
            - field: "spec.template.spec.containers[0].securityContext.runAsUser"
              equals: 0
            - field: "spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation"
              equals: true
            - field: "spec.template.spec.containers[1].securityContext.privileged"
              equals: true
            - field: "spec.template.spec.containers[1].securityContext.runAsUser"
              equals: 0
            - field: "spec.template.spec.containers[1].securityContext.allowPrivilegeEscalation"
              equals: true
            - field: "spec.template.spec.containers[2].securityContext.privileged"
              equals: true
            - field: "spec.template.spec.containers[2].securityContext.runAsUser"
              equals: 0
            - field: "spec.template.spec.containers[2].securityContext.allowPrivilegeEscalation"
              equals: true
            - field: "spec.template.spec.containers[3].securityContext.privileged"
              equals: true
            - field: "spec.template.spec.containers[3].securityContext.runAsUser"
              equals: 0
            - field: "spec.template.spec.containers[3].securityContext.allowPrivilegeEscalation"
              equals: true
